        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include <stdio.h>
        -:    4:#include <math.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include <time.h>
        -:    8:
        -:    9:#define MAX_TESTS 500 
        -:   10:
function main called 1 returned 100% blocks executed 91%
        1:   11:int main() {
        -:   12:    //initialize variables
        1:   13:    int k[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        -:   14:    int players, player, seed, handPosition, bonus;
        -:   15:    struct gameState game;
        1:   16:    int choice1 = 0;
        1:   17:    int choice2 = 0; 
        1:   18:    int choice3 = 0;
        1:   19:    int test_failed = 0;
        1:   20:    int test_status = 1; 	
        1:   21:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   22:
        1:   23:   printf("/*********************** Randomly Testing Village Card **************************/\n");
call    0 returned 100%
        -:   24:
      501:   25:    for (int i = 0; i < MAX_TESTS; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   26:
        -:   27:        //initialize variables randomly
      500:   28:        players = rand() % (MAX_PLAYERS - 2) + 2;
call    0 returned 100%
      500:   29:        seed = rand();
call    0 returned 100%
      500:   30:        bonus = 0;
      500:   31:        handPosition = rand() % 4;
call    0 returned 100%
      500:   32:        player = i % (players);
        -:   33:
      500:   34:        initializeGame(players, k, seed, &game); //initialize game 
call    0 returned 100%
        -:   35:
        -:   36:        //randomly initialize game's state variables
      500:   37:        game.deckCount[player] = rand() % MAX_DECK;   //Pick random deck size out of MAX DECK size
call    0 returned 100%
      500:   38:        game.discardCount[player] = rand() % MAX_DECK;
call    0 returned 100%
      500:   39:        game.handCount[player] = rand() % MAX_HAND;
call    0 returned 100%
        -:   40:        
        -:   41:    	//grab numbers before calling the card
      500:   42:	int handCount1 = numHandCards(&game);
call    0 returned 100%
      500:   43:	int actionCards1 = game.numActions;
        -:   44:
        -:   45:	//check if card effect works on this card
      500:   46:	if(cardEffect(village, choice1, choice2, choice3, &game, 0, 0) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   47:	//check if drawn cards has gone up by 1 and one has been discarded
        -:   48:
        -:   49:	//grab numbers after calling card	
      500:   50:	 int handCount2 = numHandCards(&game);
call    0 returned 100%
      500:   51:        int actionCards2 = game.numActions;
        -:   52:
        -:   53:		//check if hand count and number of action points were changed properly	
      500:   54:        	if(handCount2 != (handCount1 + 1 - 1)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   55:	
      500:   56:			printf("Error: Handcount should not have changed after playing village card\n");
call    0 returned 100%
      500:   57:			printf("Hand count before: %d. Hand count after: %d.\n", handCount1, handCount2); 
call    0 returned 100%
      500:   58:                        test_failed++; 	
      500:   59:			test_status = 0; //set test state to failed
        -:   60:		}
      500:   61:		if(actionCards2 != (actionCards1 + 2)){									
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      500:   62:		 	printf("Error: Number of action points should have increased by 2 after  playing village card\n");
call    0 returned 100%
      500:   63:                	printf("Action points before: %d. Action points after: %d.\n", actionCards1, actionCards2); 
call    0 returned 100%
      500:   64:			test_failed++;
      500:   65:			test_status = 0; //set test state to failed
        -:   66:        	}
        -:   67:	}
        -:   68:	else {
    #####:   69:		printf("Error: card could not be played\n"); 
call    0 never executed
        -:   70:	}
        -:   71:
      500:   72:	if(test_status == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      500:   73:		printf("Iteration %d: test failed\n", i);
call    0 returned 100%
        -:   74:	}
        -:   75:	else {
    #####:   76:		printf("Iteration %d: test passed \n", i); 
call    0 never executed
        -:   77:	}
        -:   78: 	
        -:   79:}
        1:   80:	if(test_failed > 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   81:		printf("Village card failed %d random tests\n", test_failed); 
call    0 returned 100%
        -:   82:	}
        -:   83:	else {
    #####:   84:		printf("Village card passed all random tests\n"); 
call    0 never executed
        -:   85:	}
        -:   86:
        1:   87:    return 0;
        -:   88:}