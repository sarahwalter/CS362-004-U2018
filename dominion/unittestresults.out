/*********************** Testing IsGameOver() **************************/
ISGAMEOVER() TEST HAS PASSED
/*********************** Testing SupplyCount() **************************/
SupplyCount() TEST HAS PASSED
/*********************** Testing GetCost() **************************/
GETCOST TEST PASSED
/*********************** Testing InitializeGame() **************************/
INITIALIZEGAME TEST PASSED
/*********************** Testing Smithy Card **************************/
SMITHY CARD TEST HAS FAILED 
/*********************** Testing Adventurer Card **************************/
ADVENTURER CARD TEST HAS FAILED
/*********************** Testing Village Card **************************/
VILLAGE CARD TEST HAS FAILED
/*********************** Testing Embargo Card **************************/
EMBARGO CARD TEST HAS FAILED
EMBARGO CARD TEST HAS FAILED
EMBARGO CARD TEST HAS FAILED
File 'unittest1.c'
Lines executed:87.50% of 16
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:75.00% of 8
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <assert.h>
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7://test of isGameOver() function in dominion.c
        -:    8:
function main called 1 returned 100% blocks executed 83%
        1:    9:int main(int argc, char **argv) {
        -:   10:
        1:   11:printf("/*********************** Testing IsGameOver() **************************/\n");
call    0 returned 100%
        -:   12:
        -:   13://create a gamestate
        -:   14:
        -:   15:struct gameState game;
        1:   16:int k[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        -:   17:
        -:   18://initialize game
        1:   19:int numPlayers = 2;
        1:   20:int seed = rand() % 10; 
call    0 returned 100%
        1:   21:initializeGame(numPlayers, k, seed, &game); 
call    0 returned 100%
        -:   22:
        -:   23://stack of province cards should be at 0 for game to end
        -:   24:
        -:   25://set province count to 0
        1:   26:game.supplyCount[province] = 0;
        -:   27:
        1:   28:if(isGameOver(&game) != 1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   29:	printf("ISGAMEOVER() TEST HAS FAILED\n");
call    0 never executed
        -:   30:}
        -:   31:
        -:   32://check if 3 of the supply piles are at 0
        -:   33:
        -:   34://first set supply counts to 0
        1:   35:game.supplyCount[1] = 0;
        1:   36:game.supplyCount[2] = 0;
        1:   37:game.supplyCount[3] = 0; 
        -:   38:
        1:   39:if(isGameOver(&game) != 1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   40:	printf("ISGAMEOVER() TEST HAS FAILED\n");
call    0 never executed
        -:   41:}
        -:   42:
        1:   43:printf("ISGAMEOVER() TEST HAS PASSED\n");
call    0 returned 100%
        1:   44:return 0; 
        -:   45:
        -:   46:}
        -:   47:
File 'unittest2.c'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:87.50% of 8
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include "assert.h"
        -:    4:#include "dominion.h"
        -:    5:#include "rngs.h"
        -:    6:#include <time.h>
        -:    7:
        -:    8://testing supplyCount function in dominion.c
        -:    9:
function main called 1 returned 100% blocks executed 92%
        1:   10:int main(int argc, char** argv){
        -:   11:
        1:   12:printf("/*********************** Testing SupplyCount() **************************/\n");
call    0 returned 100%
        -:   13:
        -:   14://initialize variables, create a new game state, and call initializeGame()
        -:   15:
        -:   16:struct gameState game;
        1:   17:int k[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        -:   18:
        -:   19://initialize game
        1:   20:int numPlayers = 2;
        1:   21:int seed = rand() % 10;
call    0 returned 100%
        1:   22:initializeGame(numPlayers, k, seed, &game);
call    0 returned 100%
        -:   23:
        -:   24://set the supply count for a few cards
        1:   25:game.supplyCount[0] = 1;
        1:   26:game.supplyCount[1] = 2;
        1:   27:game.supplyCount[2] = 3; 
        -:   28:
        -:   29://test to see if the supply counts are right
        -:   30:
        1:   31:if(supplyCount(0, &game) == 1 && supplyCount(1, &game) == 2 && supplyCount(2, &game) ==3){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
        -:   32:
        1:   33:printf("SupplyCount() TEST HAS PASSED\n");
call    0 returned 100%
        -:   34:
        -:   35:}
        -:   36:else {
        -:   37:
    #####:   38:printf("SupplyCount() TEST HAS FAILED!\n");
call    0 never executed
        -:   39:
        -:   40:}
        -:   41:
        1:   42:return 0; 
        -:   43:
        -:   44:}
File 'unittest3.c'
Lines executed:83.33% of 12
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:66.67% of 6
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include "assert.h"
        -:    6:#include "dominion.h"
        -:    7:#include "rngs.h"
        -:    8:#include <time.h>
        -:    9:
        -:   10://testing getCost function in dominion.c
        -:   11:
function main called 1 returned 100% blocks executed 85%
        1:   12:int main(int argc, char** argv){
        -:   13:
        1:   14:printf("/*********************** Testing GetCost() **************************/\n");
call    0 returned 100%
        -:   15:
        -:   16://initialize variables, create a new game state, and call initializeGame()
        -:   17:
        -:   18:struct gameState game;
        -:   19:
        -:   20://check function as a whole to ensure that it is returning -1 if no card name (or incorrect card name) is passed in, as it should
        1:   21:if(getCost(45) != -1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   22:	printf("GETCOST TEST FAILED.\n");
call    0 never executed
        -:   23:}
        -:   24:
        -:   25:// assert for each value of cards that getCost function returns proper amount
        1:   26:int cards[27] = {curse, estate, duchy, province, copper, silver, gold, adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall, minion, steward, tribute, ambassador, cutpurse, embargo, outpost, salvager, sea_hag, treasure_map};
        1:   27:int values[27] = {0, 2, 5, 8, 0, 3, 6, 6, 5, 4, 4, 5, 4, 4, 3, 4, 3, 5, 3, 5, 3, 4, 2, 5, 4, 4, 4};
        -:   28:
        1:   29:int x = 0;
        -:   30:
        -:   31://loop through all 27 cards and call assert statement on each
       28:   32:for(x = 0; x < 27; x++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       27:   33:	if(getCost(cards[x]) != values[x]){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   34:		printf("GETCOST TEST FAILED\n");
call    0 never executed
        -:   35:	}
        -:   36:}
        -:   37:
        1:   38:printf("GETCOST TEST PASSED\n");
call    0 returned 100%
        -:   39:
        1:   40:return 0;
        -:   41:
        -:   42:}
File 'unittest4.c'
Lines executed:70.21% of 47
Branches executed:100.00% of 28
Taken at least once:50.00% of 28
Calls executed:44.00% of 25
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include "dominion.h"
        -:    4:#include "rngs.h"
        -:    5:#include <time.h>
        -:    6:
        -:    7://testing initializeGame function in dominion.c
        -:    8:
function main called 1 returned 100% blocks executed 66%
        1:    9:int main(int argc, char** argv){
        -:   10:
        1:   11:printf("/*********************** Testing InitializeGame() **************************/\n");
call    0 returned 100%
        -:   12:
        -:   13://initialize variables, create a new game state
        -:   14:
        -:   15:struct gameState game;
        -:   16:int numPlayers; 
        1:   17:int k[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        1:   18:int seed = rand() % 10; 
call    0 returned 100%
        -:   19:
        -:   20://test out a few scenarios
        -:   21:
        -:   22://test 1 - invalid number of players
        1:   23:numPlayers = 0;
        1:   24:if(initializeGame(numPlayers, k, seed, &game) != -1){ //assert this test does not pass because number of players is 0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   25:	printf("INITIALIZEGAME TEST FAILED\n");
call    0 never executed
        -:   26:}
        -:   27:
        -:   28://test 2 with valid number of players
        1:   29:numPlayers = 2;
        1:   30:if(initializeGame(numPlayers, k, seed, &game) == -1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   31:	printf("INITIALIZEGAME TEST FAILED\n");
call    0 never executed
        -:   32:}
        -:   33:
        -:   34://test 3 - ensure correct number of curse cards set 
        -:   35:
        1:   36:numPlayers = 2;
        1:   37:initializeGame(numPlayers, k, seed, &game);
call    0 returned 100%
        1:   38:if(game.supplyCount[curse] != 10){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   39:	printf("INITIALIZEGAME TEST FAILED\n");
call    0 never executed
        -:   40:}
        -:   41:
        1:   42:numPlayers = 3;
        1:   43:initializeGame(numPlayers, k, seed, &game);
call    0 returned 100%
        1:   44:if(game.supplyCount[curse] != 20){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   45:	printf("INITIALIZEGAME TEST FAILED\n");
call    0 never executed
        -:   46:}
        -:   47:
        1:   48:numPlayers = 4; 
        1:   49:initializeGame(numPlayers, k, seed, &game);
call    0 returned 100%
        1:   50:if(game.supplyCount[curse] != 30){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   51:	printf("INITIALIZEGAME TEST FAILED\n");
call    0 never executed
        -:   52:}
        -:   53:
        -:   54://test 4 - ensure correct number of victory cards set 
        1:   55:numPlayers = 2;
        1:   56:initializeGame(numPlayers, k, seed, &game);
call    0 returned 100%
        1:   57:if(game.supplyCount[estate] != 8){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   58:	printf("INITIALIZEGAME TEST FAILED\n");
call    0 never executed
        -:   59:}
        1:   60:if(game.supplyCount[duchy] != 8){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   61:	printf("INITIALIZEGAME TEST FAILED\n");
call    0 never executed
        -:   62:}
        1:   63:if(game.supplyCount[province] != 8){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   64:	printf("INITIALIZEGAME TEST FAILED\n");
call    0 never executed
        -:   65:}
        -:   66:
        -:   67:
        1:   68:numPlayers = 3;
        1:   69:initializeGame(numPlayers, k, seed, &game);
call    0 returned 100%
        1:   70:if(game.supplyCount[estate] != 12){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   71:	printf("INITIALIZEGAME TEST FAILED\n");
call    0 never executed
        -:   72:}
        1:   73:if(game.supplyCount[duchy] != 12){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   74:	printf("INITIALIZEGAME TEST FAILED\n");
call    0 never executed
        -:   75:}
        1:   76:if(game.supplyCount[province] != 12){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   77:	printf("INITIALIZEGAME TEST FAILED\n");
call    0 never executed
        -:   78:}
        -:   79://test 5 - ensure correct number of treasure cards set 
        1:   80:initializeGame(numPlayers, k, seed, &game);
call    0 returned 100%
        1:   81:if(game.supplyCount[copper] != 60 - (7 * numPlayers)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   82:	printf("INITIALIZEGAME TEST FAILED\n");
call    0 never executed
        -:   83:}
        1:   84:if(game.supplyCount[silver] != 40){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   85:	printf("INITIALIZEGAME TEST FAILED\n");
call    0 never executed
        -:   86:}
        1:   87:if(game.supplyCount[gold] != 30){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   88:	printf("INITIALIZEGAME TEST FAILED\n");
call    0 never executed
        -:   89:}
        -:   90:
        1:   91:printf("INITIALIZEGAME TEST PASSED\n");
call    0 returned 100%
        -:   92:
        1:   93:return 0;
        -:   94:}
File 'cardtest1.c'
Lines executed:89.47% of 19
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:77.78% of 9
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:
        -:    7://testing the smithy card
        -:    8:
function main called 1 returned 100% blocks executed 86%
        1:    9:int main(int argc, char** argv) {
        -:   10:
        1:   11:printf("/*********************** Testing Smithy Card **************************/\n");
call    0 returned 100%
        -:   12:
        -:   13://declare variables
        -:   14:struct gameState game;
        -:   15:
        1:   16:int players = 2; 
        -:   17:
        1:   18:int k[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        1:   19:int seed = rand() % 10;  
call    0 returned 100%
        1:   20:int bonus = 0;
        1:   21:int handPosition = 4;
        1:   22:int choice1 = 0;
        1:   23:int choice2 = 0; 
        1:   24:int choice3 = 0; 
        -:   25://initialize game
        -:   26:
        1:   27:initializeGame(players, k, seed, &game);
call    0 returned 100%
        -:   28:
        -:   29://grab numbers before calling the card
        1:   30:int handCount1 = numHandCards(&game);
call    0 returned 100%
        -:   31:
        1:   32:if(cardEffect(smithy, choice1, choice2, choice3, &game, handPosition, bonus) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   33:
        1:   34:	int handCount2 = numHandCards(&game); 
call    0 returned 100%
        -:   35:
        1:   36:	if(handCount2 == (handCount1 + 3 - 1)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   37:		printf("SMITHY CARD TEST HAS PASSED\n"); 	
call    0 never executed
        -:   38:	}
        -:   39:	else {
        1:   40:		printf("SMITHY CARD TEST HAS FAILED \n");
call    0 returned 100%
        -:   41:	}
        -:   42:}
        -:   43:else {
        -:   44:
    #####:   45:	printf("SMITHY CARD TEST HAS FAILED!\n");
call    0 never executed
        -:   46:}
        -:   47:
        1:   48: return 0; 
        -:   49:}
File 'cardtest2.c'
Lines executed:88.24% of 17
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:77.78% of 9
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include <assert.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8://testing the adventurer card
        -:    9:
function main called 1 returned 100% blocks executed 86%
        1:   10:int main(int argc, char** argv) {
        1:   11:printf("/*********************** Testing Adventurer Card **************************/\n");
call    0 returned 100%
        -:   12://declare variables
        -:   13:struct gameState game;
        1:   14:int seed = rand() % 10;
call    0 returned 100%
        1:   15:int players = 2;
        1:   16:int bonus = 0; 
        1:   17:int handPosition = 4; 
        1:   18:int choice1, choice2, choice3 = 0; 
        1:   19:int k[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        -:   20:
        -:   21://initialize game
        -:   22:
        1:   23:initializeGame(players, k, seed, &game);
call    0 returned 100%
        -:   24:
        -:   25://grab numbers before calling the card
        1:   26:int handCount1 = numHandCards(&game);
call    0 returned 100%
        -:   27:
        1:   28:if(cardEffect(adventurer, choice1, choice2, choice3, &game, handPosition, bonus) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   29:
        1:   30:int handCount2 = numHandCards(&game);
call    0 returned 100%
        -:   31:
        -:   32:	//check if deck has grown by more than 2 (number of treasure cards that can be taken with this card)
        1:   33:	if(handCount2 == (handCount1 + 2)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   34:		printf("ADVENTURER CARD TEST HAS PASSED\n");
call    0 never executed
        -:   35:	}
        -:   36:	else {
        1:   37:		 printf("ADVENTURER CARD TEST HAS FAILED\n");
call    0 returned 100%
        -:   38:	}
        -:   39:}
        -:   40:else
        -:   41:{
    #####:   42:	printf("ADVENTURER CARD TEST HAS FAILED\n");
call    0 never executed
        -:   43:}
        -:   44:
        1:   45:return 0;
        -:   46:
        -:   47:}
File 'cardtest3.c'
Lines executed:89.47% of 19
Branches executed:66.67% of 6
Taken at least once:33.33% of 6
Calls executed:77.78% of 9
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:#include <stdlib.h>
        -:    3:#include <stdio.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8://testing the village card
        -:    9:
function main called 1 returned 100% blocks executed 80%
        1:   10:int main(int argc, char** argv) {
        -:   11:
        1:   12:printf("/*********************** Testing Village Card **************************/\n");
call    0 returned 100%
        -:   13:
        -:   14://declare variables
        -:   15:struct gameState game;
        1:   16:int seed = rand() % 10; 
call    0 returned 100%
        1:   17:int players = 2;
        1:   18:int choice1 = 0;
        1:   19:int choice2 = 0; 
        1:   20:int choice3 = 0;
        -:   21:
        1:   22:int k[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        -:   23:
        -:   24://initialize game
        -:   25:
        1:   26:initializeGame(players, k, seed, &game);
call    0 returned 100%
        -:   27:
        -:   28://grab numbers before calling the card
        1:   29:int handCount1 = numHandCards(&game);
call    0 returned 100%
        1:   30:int actionCards1 = game.numActions;
        -:   31:
        1:   32:if(cardEffect(village, choice1, choice2, choice3, &game, 0, 0) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   33:
        1:   34:	int handCount2 = numHandCards(&game);
call    0 returned 100%
        1:   35:	int actionCards2 = game.numActions; 
        -:   36:
        -:   37:	//check if drawn cards has gone up by 1 and one has been discarded
        1:   38:	if((handCount2 == (handCount1 + 1 - 1)) && (actionCards2 == (actionCards1 + 2))){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:   39:
    #####:   40:		printf("VILLAGE CARD TEST HAS PASSED\n");
call    0 never executed
        -:   41:	}
        -:   42:	else
        1:   43:		printf("VILLAGE CARD TEST HAS FAILED\n");
call    0 returned 100%
        -:   44:
        -:   45:}
        -:   46:else {
        -:   47:
    #####:   48:	printf("VILLAGE CARD TEST HAS FAILED\n");
call    0 never executed
        -:   49:}
        -:   50:
        -:   51:
        1:   52:return 0;
        -:   53:
        -:   54:}
File 'cardtest4.c'
Lines executed:92.59% of 27
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
Calls executed:81.82% of 11
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:
        -:    7://testing the Embargo card
        -:    8:
function main called 1 returned 100% blocks executed 89%
        1:    9:int main(int argc, char** argv) {
        -:   10:
        1:   11:printf("/*********************** Testing Embargo Card **************************/\n");
call    0 returned 100%
        -:   12:
        -:   13://declare variables
        -:   14:struct gameState game;
        1:   15:int seed = rand() % 10;
call    0 returned 100%
        1:   16:int players = 2;
        1:   17:int choice1 = 0;
        1:   18:int choice2 = 0;
        1:   19:int choice3 = 0;
        1:   20:int handPosition = 4; 
        1:   21:int k[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        1:   22:int bonus = 0; 
        -:   23:
        -:   24://initialize game
        -:   25:
        1:   26:initializeGame(players, k, seed, &game);
call    0 returned 100%
        -:   27:
        -:   28://grab numbers before calling the card
        1:   29:int handCount1 = numHandCards(&game);
call    0 returned 100%
        1:   30:int coinSupply1 = game.coins;
        -:   31:
        1:   32:int embargotoken1 = game.embargoTokens;
        -:   33:
        1:   34:if(cardEffect(adventurer, choice1, choice2, choice3, &game, handPosition, bonus) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   35:
        1:   36:int handCount2 = numHandCards(&game);
call    0 returned 100%
        1:   37:int coinSupply2 = game.coins;
        1:   38:int embargotoken2 = game.embargoTokens;
        -:   39:
        1:   40:if(handCount2 != (handCount1  - 1)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   41:	
        1:   42:	printf("EMBARGO CARD TEST HAS FAILED\n");
call    0 returned 100%
        -:   43:}
        1:   44:if(coinSupply2 != (coinSupply1 + 2)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   45:	printf("EMBARGO CARD TEST HAS FAILED\n");
call    0 returned 100%
        -:   46:}
        -:   47:
        1:   48:if(embargotoken2 != (embargotoken1 + 1)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   49:	printf("EMBARGO CARD TEST HAS FAILED\n");
call    0 returned 100%
        -:   50:}
        -:   51:else
        -:   52:{
    #####:   53:	printf("EMBARGO CARD TEST HAS PASSED\n"); 
call    0 never executed
        -:   54:}
        -:   55:}
        -:   56:else {
    #####:   57:	printf("EMBARGO CARD TEST HAS FAILED\n");
call    0 never executed
        -:   58:}
        -:   59:
        1:   60:return 0;
        -:   61:
        -:   62:}
        -:   63:
File 'dominion.c'
Lines executed:22.65% of 565
Branches executed:25.18% of 417
Taken at least once:16.55% of 417
Calls executed:13.54% of 96
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 30 returned 100% blocks executed 83%
       30:   10:int compare(const void* a, const void* b) {
       30:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   12:    return 1;
       30:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        8:   14:    return -1;
       22:   15:  return 0;
        -:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        1:   46:  SelectStream(1);
call    0 returned 100%
        1:   47:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   48:  
        -:   49:  //check number of players
        1:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        1:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       11:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:    {
      110:   61:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:        {
      100:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        1:   75:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   76:    {
        1:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        1:   89:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   90:    {
        1:   91:      state->supplyCount[estate] = 8;
        1:   92:      state->supplyCount[duchy] = 8;
        1:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        1:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:  state->supplyCount[silver] = 40;
        1:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       21:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  109:    {
      210:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  111:	{
      194:  112:	  if (kingdomCards[j] == i)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
        4:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        -:  116:		{
        2:  117:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
        3:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
        4:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      190:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        3:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  141:    {
        2:  142:      state->deckCount[i] = 0;
        8:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:	{
        6:  145:	  state->deck[i][j] = estate;
        6:  146:	  state->deckCount[i]++;
        -:  147:	}
       16:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  149:	{
       14:  150:	  state->deck[i][j] = copper;
       14:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        3:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  157:    {
        2:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
        3:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        2:  168:      state->handCount[i] = 0;
        2:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       28:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  179:    {
       27:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        1:  184:  state->outpostPlayed = 0;
        1:  185:  state->phase = 0;
        1:  186:  state->numActions = 1;
        1:  187:  state->numBuys = 1;
        1:  188:  state->playedCardCount = 0;
        1:  189:  state->whoseTurn = 0;
        1:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
        6:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  195:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:  }
        -:  197:
        1:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
        1:  200:  return 0;
        -:  201:}
        -:  202:
function shuffle called 4 returned 100% blocks executed 100%
        4:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        4:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        4:  211:  if (state->deckCount[player] < 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  212:    return -1;
        2:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       24:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       20:  218:    newDeck[newDeckPos] = state->deck[player][card];
       20:  219:    newDeckPos++;
       62:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
       42:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
       20:  223:    state->deckCount[player]--;
        -:  224:  }
       22:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  226:    state->deck[player][i] = newDeck[i];
       20:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
        2:  230:  return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
call    0 never executed
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
function numHandCards called 2 returned 100% blocks executed 100%
        2:  313:int numHandCards(struct gameState *state) {
        2:  314:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 3 returned 100% blocks executed 100%
        3:  348:int whoseTurn(struct gameState *state) {
        3:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 11 returned 100% blocks executed 85%
       11:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       11:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
        1:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
        1:  540:    state->deckCount[player] = state->discardCount[player];
        1:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
        1:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
        1:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
        1:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
        1:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
        1:  561:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       10:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       10:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  578:    state->deckCount[player]--;
       10:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       10:  582:  return 0;
        -:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648:
function SmithyCard called 0 returned 0% blocks executed 0%
    #####:  649:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  650:
        -:  651:  //+3 Cards
        -:  652:  int i;
    #####:  653:  for (i = 0; i < 5; i++)
branch  0 never executed
branch  1 never executed
        -:  654:  {
    #####:  655:      drawCard(currentPlayer, state);
call    0 never executed
        -:  656:  }
        -:  657:   //discard card from hand
        -:  658:   //discardCard(handPos, currentPlayer, state, 0);
    #####:  659:   return 0;
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:
        -:  662:}
        -:  663:
function AdventurerCard called 1 returned 100% blocks executed 100%
        1:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
        8:  666:  while(drawntreasure<5){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        6:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        1:  668:          shuffle(currentPlayer, state);
call    0 returned 100%
        -:  669:        }
        6:  670:        drawCard(currentPlayer, state);
call    0 returned 100%
        6:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        6:  672:        if (cardDrawn == gold || cardDrawn == silver || cardDrawn == copper)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 83% (fallthrough)
branch  5 taken 17%
        5:  673:		drawntreasure++;
        -:  674:        else{
        1:  675:          temphand[z]=cardDrawn;
        1:  676:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:  677:          z++;
        -:  678:        }
        -:  679:      }
        3:  680:      while(z-1>=0){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1:  682:        z=z-1;
        -:  683:      }
        -:  684:
        1:  685:  return 0;
        -:  686:// bug introduced: player is able to draw 5 treasure cards instead of 2. 
        -:  687:}
        -:  688:
        -:  689:
function VillageCard called 0 returned 0% blocks executed 0%
    #####:  690:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  691:
        -:  692:   //+1 Card
    #####:  693:   drawCard(currentPlayer, state);
call    0 never executed
    #####:  694:   drawCard(currentPlayer, state);  
call    0 never executed
    #####:  695:   drawCard(currentPlayer, state);
call    0 never executed
        -:  696:
        -:  697:   //+2 Actions
    #####:  698:   state->numActions = state->numActions + 10;
        -:  699:  
        -:  700:    //discard played card from hand
    #####:  701:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  702:
    #####:  703:  return 0; 
        -:  704:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1 
        -:  705:}
        -:  706:
function GreatHallCard called 0 returned 0% blocks executed 0%
    #####:  707:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  708:
        -:  709:      //+1 Card
    #####:  710:      drawCard(currentPlayer, state);
call    0 never executed
        -:  711:
        -:  712:      //+1 Actions
    #####:  713:      state->numActions++;
        -:  714:
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:      
    #####:  718:      return 0;   
        -:  719:}
        -:  720:
function EmbargoCard called 0 returned 0% blocks executed 0%
    #####:  721:int EmbargoCard(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  722:
    #####:  723:	state->coins = state->coins + 20;
        -:  724:
        -:  725:      //see if selected pile is in play
    #####:  726:       if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  727:          {
    #####:  728:             return -1;
        -:  729:          }
        -:  730:    
        -:  731:       //add embargo token to selected supply pile
    #####:  732:       state->embargoTokens[choice1]++;
    #####:  733:       state->embargoTokens[choice1]++;  
        -:  734:
        -:  735:      //trash card
    #####:  736:       discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
        -:  737:
    #####:  738:	return 0; 
        -:  739://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
        -:  740:}
        -:  741:
function cardEffect called 1 returned 100% blocks executed 3%
        1:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
        1:  749:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
        1:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
        1:  754:  int drawntreasure=0;
        -:  755:  int cardDrawn;
        1:  756:  int z = 0;// this is the counter for the temp hand
        1:  757:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  758:    nextPlayer = 0;
        -:  759:  }
        -:  760:  
        -:  761:	
        -:  762:  //uses switch to select card and perform actions
        1:  763:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  764:    {
        -:  765:    case adventurer:
        -:  766:     
        -:  767:	//call function 
        1:  768:	AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
call    0 returned 100%
        -:  769:
        1:  770:	return 0;
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  777:	}
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
call    0 never executed
        -:  788:	    }
        -:  789:	}
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  793:			
    #####:  794:      return 0;
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:      }
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  809:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  810:	  if (DEBUG)
        -:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
        -:  816:	}
    #####:  817:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  818:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
        -:  823:	}
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  831:	  x = 0;//No more buying cards
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
        -:  844:      }
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  881:	      break;
        -:  882:	    }
        -:  883:	}
        -:  884:			
    #####:  885:      return 0;
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  891:	{
    #####:  892:	  return -1;
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  906:	      break;
        -:  907:	    }
        -:  908:	}
        -:  909:
        -:  910:
    #####:  911:      return 0;
        -:  912:		
        -:  913:    case smithy:
    #####:  914:      	SmithyCard(currentPlayer, state, handPos);
call    0 never executed
    #####:  915:	return 0;
        -:  916:		
        -:  917:    case village:
        -:  918:      
    #####:  919:	VillageCard(currentPlayer, state, handPos);
call    0 never executed
        -:  920:
    #####:  921:	return 0;
        -:  922:		
        -:  923:    case baron:
    #####:  924:      state->numBuys++;//Increase buys by 1!
    #####:  925:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  926:	int p = 0;//Iterator for hand!
    #####:  927:	int card_not_discarded = 1;//Flag for discard set!
    #####:  928:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  929:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  930:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  931:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  932:	    state->discardCount[currentPlayer]++;
    #####:  933:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  934:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  935:	    }
    #####:  936:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  937:	    state->handCount[currentPlayer]--;
    #####:  938:	    card_not_discarded = 0;//Exit the loop
        -:  939:	  }
    #####:  940:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  941:	    if(DEBUG) {
        -:  942:	      printf("No estate cards in your hand, invalid choice\n");
        -:  943:	      printf("Must gain an estate if there are any\n");
        -:  944:	    }
    #####:  945:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  946:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  947:	      state->supplyCount[estate]--;//Decrement estates
    #####:  948:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  949:		isGameOver(state);
call    0 never executed
        -:  950:	      }
        -:  951:	    }
    #####:  952:	    card_not_discarded = 0;//Exit the loop
        -:  953:	  }
        -:  954:			    
        -:  955:	  else{
    #####:  956:	    p++;//Next card
        -:  957:	  }
        -:  958:	}
        -:  959:      }
        -:  960:			    
        -:  961:      else{
    #####:  962:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  963:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  964:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  965:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  966:	    isGameOver(state);
call    0 never executed
        -:  967:	  }
        -:  968:	}
        -:  969:      }
        -:  970:	    
        -:  971:      
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case great_hall:
        -:  975:      
    #####:  976:	GreatHallCard(currentPlayer, state, handPos);
call    0 never executed
        -:  977:
    #####:  978:	return 0;
        -:  979:		
        -:  980:    case minion:
        -:  981:      //+1 action
    #####:  982:      state->numActions++;
        -:  983:			
        -:  984:      //discard card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  986:			
    #####:  987:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  state->coins = state->coins + 2;
        -:  990:	}
        -:  991:			
    #####:  992:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  993:	{
        -:  994:	  //discard hand
    #####:  995:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  996:	    {
    #####:  997:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  998:	    }
        -:  999:				
        -: 1000:	  //draw 4
    #####: 1001:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1002:	    {
    #####: 1003:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1004:	    }
        -: 1005:				
        -: 1006:	  //other players discard hand and redraw if hand size > 4
    #####: 1007:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	    {
    #####: 1009:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1012:		    {
        -: 1013:		      //discard hand
    #####: 1014:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1015:			{
    #####: 1016:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1017:			}
        -: 1018:							
        -: 1019:		      //draw 4
    #####: 1020:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1021:			{
    #####: 1022:			  drawCard(i, state);
call    0 never executed
        -: 1023:			}
        -: 1024:		    }
        -: 1025:		}
        -: 1026:	    }
        -: 1027:				
        -: 1028:	}
    #####: 1029:      return 0;
        -: 1030:		
        -: 1031:    case steward:
    #####: 1032:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1033:	{
        -: 1034:	  //+2 cards
    #####: 1035:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1036:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1037:	}
    #####: 1038:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1039:	{
        -: 1040:	  //+2 coins
    #####: 1041:	  state->coins = state->coins + 2;
        -: 1042:	}
        -: 1043:      else
        -: 1044:	{
        -: 1045:	  //trash 2 cards in hand
    #####: 1046:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1047:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1048:	}
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1052:      return 0;
        -: 1053:		
        -: 1054:    case tribute:
    #####: 1055:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1056:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1057:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	  state->deckCount[nextPlayer]--;
        -: 1059:	}
    #####: 1060:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1061:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1062:	  state->discardCount[nextPlayer]--;
        -: 1063:	}
        -: 1064:	else{
        -: 1065:	  //No Card to Reveal
        -: 1066:	  if (DEBUG){
        -: 1067:	    printf("No cards to reveal\n");
        -: 1068:	  }
        -: 1069:	}
        -: 1070:      }
        -: 1071:	    
        -: 1072:      else{
    #####: 1073:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1074:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1075:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1076:	    state->deckCount[nextPlayer]++;
    #####: 1077:	    state->discard[nextPlayer][i] = -1;
    #####: 1078:	    state->discardCount[nextPlayer]--;
        -: 1079:	  }
        -: 1080:			    
    #####: 1081:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1082:	} 
    #####: 1083:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1084:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1085:	state->deckCount[nextPlayer]--;
    #####: 1086:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1087:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1088:	state->deckCount[nextPlayer]--;
        -: 1089:      }    
        -: 1090:		       
    #####: 1091:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1092:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1093:	state->playedCardCount++;
    #####: 1094:	tributeRevealedCards[1] = -1;
        -: 1095:      }
        -: 1096:
    #####: 1097:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1098:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1099:	  state->coins += 2;
        -: 1100:	}
        -: 1101:		    
    #####: 1102:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1103:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1104:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1105:	}
        -: 1106:	else{//Action Card
    #####: 1107:	  state->numActions = state->numActions + 2;
        -: 1108:	}
        -: 1109:      }
        -: 1110:	    
    #####: 1111:      return 0;
        -: 1112:		
        -: 1113:    case ambassador:
    #####: 1114:      j = 0;		//used to check if player has enough cards to discard
        -: 1115:
    #####: 1116:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1117:	{
    #####: 1118:	  return -1;				
        -: 1119:	}
        -: 1120:
    #####: 1121:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  return -1;
        -: 1124:	}
        -: 1125:
    #####: 1126:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1127:	{
    #####: 1128:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1129:	    {
    #####: 1130:	      j++;
        -: 1131:	    }
        -: 1132:	}
    #####: 1133:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  return -1;				
        -: 1136:	}
        -: 1137:
        -: 1138:      if (DEBUG) 
        -: 1139:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1140:
        -: 1141:      //increase supply count for choosen card by amount being discarded
    #####: 1142:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1143:			
        -: 1144:      //each other player gains a copy of revealed card
    #####: 1145:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1146:	{
    #####: 1147:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1148:	    {
    #####: 1149:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1150:	    }
        -: 1151:	}
        -: 1152:
        -: 1153:      //discard played card from hand
    #####: 1154:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1155:
        -: 1156:      //trash copies of cards returned to supply
    #####: 1157:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1158:	{
    #####: 1159:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1160:	    {
    #####: 1161:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1162:		{
    #####: 1163:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1164:		  break;
        -: 1165:		}
        -: 1166:	    }
        -: 1167:	}			
        -: 1168:
    #####: 1169:      return 0;
        -: 1170:		
        -: 1171:    case cutpurse:
        -: 1172:
    #####: 1173:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1174:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1175:	{
    #####: 1176:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1177:	    {
    #####: 1178:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1179:		{
    #####: 1180:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1181:		    {
    #####: 1182:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1183:		      break;
        -: 1184:		    }
    #####: 1185:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1186:		    {
    #####: 1187:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1188:			{
        -: 1189:			  if (DEBUG)
        -: 1190:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1191:			}	
    #####: 1192:		      break;
        -: 1193:		    }		
        -: 1194:		}
        -: 1195:					
        -: 1196:	    }
        -: 1197:				
        -: 1198:	}				
        -: 1199:
        -: 1200:      //discard played card from hand
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1202:
    #####: 1203:      return 0;
        -: 1204:
        -: 1205:		
        -: 1206:    case embargo: 
        -: 1207:      
    #####: 1208:	EmbargoCard(currentPlayer, handPos, state, choice1); 
call    0 never executed
    #####: 1209:	return 0;
        -: 1210:		
        -: 1211:    case outpost:
        -: 1212:      //set outpost flag
    #####: 1213:      state->outpostPlayed++;
        -: 1214:			
        -: 1215:      //discard card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case salvager:
        -: 1220:      //+1 buy
    #####: 1221:      state->numBuys++;
        -: 1222:			
    #####: 1223:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //gain coins equal to trashed card
    #####: 1226:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1227:	  //trash card
    #####: 1228:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1229:	}
        -: 1230:			
        -: 1231:      //discard card
    #####: 1232:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1233:      return 0;
        -: 1234:		
        -: 1235:    case sea_hag:
    #####: 1236:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1237:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1238:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1239:	  state->discardCount[i]++;
    #####: 1240:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1241:	}
        -: 1242:      }
    #####: 1243:      return 0;
        -: 1244:		
        -: 1245:    case treasure_map:
        -: 1246:      //search hand for another treasure_map
    #####: 1247:      index = -1;
    #####: 1248:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1249:	{
    #####: 1250:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1251:	    {
    #####: 1252:	      index = i;
    #####: 1253:	      break;
        -: 1254:	    }
        -: 1255:	}
    #####: 1256:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1257:	{
        -: 1258:	  //trash both treasure cards
    #####: 1259:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1260:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1261:
        -: 1262:	  //gain 4 Gold cards
    #####: 1263:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1264:	    {
    #####: 1265:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1266:	    }
        -: 1267:				
        -: 1268:	  //return success
    #####: 1269:	  return 1;
        -: 1270:	}
        -: 1271:			
        -: 1272:      //no second treasure_map found in hand
    #####: 1273:      return -1;
        -: 1274:    }
        -: 1275:	
    #####: 1276:  return -1;
        -: 1277:}
        -: 1278:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
    #####: 1283:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1284:    {
        -: 1285:      //add card to played pile
    #####: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1287:      state->playedCardCount++;
        -: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
    #####: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
    #####: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
    #####: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
    #####: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
    #####: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
    #####: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
    #####: 1314:  return 0;
        -: 1315:}
        -: 1316:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
        -: 1336:    }
    #####: 1337:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
        -: 1341:    }
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
        -: 1352:}
        -: 1353:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
        1: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
        6: 1362:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1363:    {
        5: 1364:      if (state->hand[player][i] == copper)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1365:	{
        3: 1366:	  state->coins += 1;
        -: 1367:	}
        2: 1368:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
        -: 1371:	}
        2: 1372:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
        -: 1375:	}	
        -: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
        1: 1379:  state->coins += bonus;
        -: 1380:
        1: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386: